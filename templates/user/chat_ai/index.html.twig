<html class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}eventora{% endblock %}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        
        <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 128 128'><text y='1.2em' font-size='96'>⚫️</text><text y='1.3em' x='0.2em' font-size='76' fill='%23fff'>sf</text></svg>">

        {% block stylesheets %}
            <link href="https://fonts.googleapis.com/css?family=Work+Sans:400,300,600,400italic,700" rel="stylesheet" type="text/css">
            <link href="https://fonts.googleapis.com/css?family=Sacramento" rel="stylesheet">
            <!-- Animate.css -->
            <link rel="stylesheet" href="{{ asset('css/animate.css') }}">
            <!-- Icomoon Icon Fonts -->
            <link rel="stylesheet" href="{{ asset('css/icomoon.css') }}">
            <!-- Bootstrap -->
            <link rel="stylesheet" href="{{ asset('css/bootstrap.css') }}">
            <!-- Magnific Popup -->
            <link rel="stylesheet" href="{{ asset('css/magnific-popup.css') }}">
            <!-- Owl Carousel -->
            <link rel="stylesheet" href="{{ asset('css/owl.carousel.min.css') }}">
            <link rel="stylesheet" href="{{ asset('css/owl.theme.default.min.css') }}">
            <!-- Theme style -->
            <link rel="stylesheet" href="{{ asset('css/style1.css') }}">
            <!-- Navbar -->
            <link rel="stylesheet" href="{{ asset('css/navbar.css') }}">
            <!-- chat_ai -->
            <link rel="stylesheet" href="{{ asset('css/chat_ai.css') }}">
            <!-- Fonts for card hover effect -->
            <link href="https://fonts.googleapis.com/css?family=Raleway:400,500,700|Playfair+Display:700" rel="stylesheet">
        {% endblock %}

        <!-- Modernizr JS -->
        <script src="{{ asset('js/modernizr-2.6.2.min.js') }}"></script>
        <!-- FOR IE9 below -->
        <script src="{{ asset('js/respond.min.js') }}"></script>
    </head>
    <body>
        <div class="fh5co-loader"></div>
        {% block body %}
        <nav class="fh5co-nav" role="navigation">
            <div class="container">
                 <div class="menu-toggle">
                    <i class="icon-menu"></i>
                </div>
                <div class="menu-1">
                    <ul>
                        <li class=""><a href="{{ path('app_home') }}">Home</a></li>
                        <li class="has-dropdown">
                            <a href="#">Réservation</a>
                            <ul class="dropdown">
                                    <li><a href="{{ path('user_reservation_personnalise_new') }}">Reservation personnalisée</a></li>
                                    <li><a href="{{ path('user_reservation_pack_new') }}">Reservation Pack</a></li>
                                </ul>
                        </li>
                        <li class="has-dropdown">
                            <a href="{{ path('user_packs') }}">Packs</a>
                        </li>
                        <li class="has-dropdown">
                            <a href="#">Services</a>
                            <ul class="dropdown">
                                <li><a href="{{ path('user_services') }}">Service</a></li>
                                <li><a href="{{ path('user_sponsor') }}">Partenaire</a></li>
                            </ul>
                        </li>
                        <li><a href="{{ path('app_reclamation_new') }}">Reclamation</a></li>
                        <li><a href="{{ path('app_feedback_new') }}">Feedback</a></li>
                        <li class="active"><a href="{{ path('user_chat_ai') }}">Talk with Evi</a></li>
                        <li class="has-dropdown">
                            <a href="#">
                                <span class="user-circle">
                                    {% if app.user and app.user.image %}
                                        <img src="{{ asset('Uploads/images/' ~ app.user.image) }}" alt="Profile">
                                    {% else %}
                                        <i class="icon-user"></i>
                                    {% endif %}
                                </span>
                                Contact
                            </a>
                            <ul class="dropdown">
                                {% if app.user %}
                                    <li><a href="{{ path('app_settings') }}">Paramètres</a></li>
                                    <li><a href="{{ path('app_home') }}">Notifications</a></li>
                                    <li><a href="{{ path('app_home') }}">Historique</a></li>
                                    {% if is_granted('ROLE_ADMIN') %}
                                        <li><a href="{{ path('admin_dashboard') }}">Dashboard</a></li>
                                    {% endif %}
                                    <li><a href="{{ path('app_logout') }}">Déconnexion</a></li>
                                {% else %}
                                    <li><a href="{{ path('app_auth') }}">Connexion</a></li>
                                    <li><a href="{{ path('app_auth') }}">Inscription</a></li>
                                {% endif %}
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        
        
       
        <div id="page">
            <div class="background-circles">
                <div class="circle"></div>
                <div class="circle"></div>
                <div class="circle"></div>
                <div class="circle"></div>
            </div>
            <div class="main-content">
                <h1>Hi, {{ app.user.prenom ??""}}<br>Can I help you with anything?</h1>
                <p>Ready to assist you with anything you need, from answering<br>questions to providing recommendations. Let's get started!</p>
            </div>
        
            <div class="chat-container" id="chat-container">
                <!-- Les messages seront ajoutés ici dynamiquement -->
            </div>
        
            <div class="input-container">
                <input type="text" id="user-input" placeholder="Ask Evi anything...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <script>
            async function sendMessage() {
                const input = document.getElementById('user-input');
                const message = input.value.trim();
                if (!message) return;
            
                const chatContainer = document.getElementById('chat-container');
            
                // Créer un conteneur pour le message de l'utilisateur
                const userMessageWrapper = document.createElement('div');
                userMessageWrapper.classList.add('message-wrapper');
            
                const userMessage = document.createElement('div');
                userMessage.classList.add('message', 'user-message');
                userMessage.textContent = message;
            
                // Ajouter les icônes d'actions pour les messages de l'utilisateur
                const actions = document.createElement('div');
                actions.classList.add('message-actions');
                actions.innerHTML = `
                    <button class="action-btn" title="Modifier" onclick="editMessage(this)">&#9998;</button>
                    <button class="action-btn" title="Copier" onclick="copyMessage(this)">&#128203;</button>
                `;
            
                userMessageWrapper.appendChild(userMessage);
                userMessageWrapper.appendChild(actions);
                chatContainer.appendChild(userMessageWrapper);
                input.value = '';
            
                chatContainer.scrollTop = chatContainer.scrollHeight;
            
                try {
                    const response = await fetch('{{ path('user_chat_ai_ask') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': '{{ csrf_token('chat_ai') }}'
                        },
                        body: JSON.stringify({ message })
                    });
            
                    const data = await response.json();
                    if (data.error) {
                        throw new Error(data.error);
                    }
            
                    // Créer un conteneur pour le message du bot
                    const botMessageWrapper = document.createElement('div');
                    botMessageWrapper.classList.add('message-wrapper', 'bot');
            
                    const botMessage = document.createElement('div');
                    botMessage.classList.add('message', 'bot-message');
                    botMessage.textContent = data.response;
            
                    // Ajouter une icône copier pour les messages du bot
                    const botActions = document.createElement('div');
                    botActions.classList.add('message-actions');
                    botActions.innerHTML = `<button class="action-btn" title="Copier" onclick="copyMessage(this)">&#128203;</button>`;
            
                    botMessageWrapper.appendChild(botMessage);
                    botMessageWrapper.appendChild(botActions);
                    chatContainer.appendChild(botMessageWrapper);
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                } catch (error) {
                    const errorMessageWrapper = document.createElement('div');
                    errorMessageWrapper.classList.add('message-wrapper', 'bot');
            
                    const errorMessage = document.createElement('div');
                    errorMessage.classList.add('message', 'bot-message');
                    errorMessage.textContent = 'Erreur : ' + error.message;
            
                    errorMessageWrapper.appendChild(errorMessage);
                    chatContainer.appendChild(errorMessageWrapper);
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            }
            
            function editMessage(button) {
                const messageWrapper = button.closest('.message-wrapper');
                const message = messageWrapper.querySelector('.user-message').textContent;
                const input = document.getElementById('user-input');
                input.value = message;
                input.focus();
            }
            
            function copyMessage(button) {
                const messageWrapper = button.closest('.message-wrapper');
                const message = messageWrapper.querySelector('.message').textContent;
                navigator.clipboard.writeText(message).then(() => {
                   
                }).catch(err => {
                    console.error('Erreur lors de la copie :', err);
                });
            }
            
            document.getElementById('user-input').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendMessage();
            });
            </script>
        



{% endblock %}
{% block javascripts %}
    <!-- Charger d'abord jQuery -->
    <script src="{{ asset('js/jquery.min.js') }}"></script>
    <!-- Ensuite, Waypoints.js -->
    <script src="https://cdn.jsdelivr.net/npm/waypoints@4.0.1/lib/jquery.waypoints.min.js"></script>
    <!-- Ensuite Stellar.js -->
    <script src="{{ asset('js/jquery.stellar.min.js') }}"></script>
    <!-- Ensuite les autres scripts -->
    <script src="{{ asset('js/bootstrap.min.js') }}"></script>
    <script src="{{ asset('js/owl.carousel.min.js') }}"></script>
    <script src="{{ asset('js/jquery.magnific-popup.min.js') }}"></script>
    <script src="{{ asset('js/simplyCountdown.js') }}"></script>
    <script src="{{ asset('js/main.js') }}"></script>
    <!-- Vue.js for card hover effect -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>
    <script>
        var eventDate = new Date('2025-12-31'); // Date mise à jour dynamiquement
        simplyCountdown('.simply-countdown-one', {
            year: eventDate.getFullYear(),
            month: eventDate.getMonth() + 1,
            day: eventDate.getDate(),
            enableUtc: false
        });

        document.addEventListener('DOMContentLoaded', () => {
            try {
                const toggleButtons = document.querySelectorAll('.toggle-details');
                
                toggleButtons.forEach(button => {
                    const details = button.closest('.back-content').querySelector('.back-details');
                    if (!details) {
                        console.warn('No back-details element found for toggle button:', button);
                        return;
                    }
        
                    button.addEventListener('click', () => {
                        const isExpanded = details.classList.toggle('expanded');
                        button.setAttribute('aria-expanded', isExpanded);
                        button.textContent = isExpanded ? 'Voir moins' : 'Voir plus';
                        
                        // Smooth scroll to top of details when expanding
                        if (isExpanded) {
                            details.scrollTop = 0;
                        }
                    });
                });
        
                // Add focus management for accessibility
                document.querySelectorAll('.card').forEach(card => {
                    card.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            card.querySelector('.reserve-btn')?.focus();
                        }
                    });
                });
        
                // Lazy load AOS animations
                if (typeof AOS !== 'undefined') {
                    AOS.init({
                        duration: 800,
                        once: true,
                        offset: 100
                    });
                }
            } catch (error) {
                console.error('Error initializing service cards:', error);
            }
        });

        // Vue.js Card Hover Effect
        Vue.config.devtools = true;

        Vue.component('card', {
            template: `
                <div class="card-wrap"
                    @mousemove="handleMouseMove"
                    @mouseenter="handleMouseEnter"
                    @mouseleave="handleMouseLeave"
                    ref="card">
                    <div class="card"
                        :style="cardStyle">
                        <div class="card-bg" :style="[cardBgTransform, cardBgImage]"></div>
                        <div class="card-info">
                            <slot name="header"></slot>
                            <slot name="content"></slot>
                        </div>
                    </div>
                </div>`,
            mounted() {
                this.width = this.$refs.card.offsetWidth;
                this.height = this.$refs.card.offsetHeight;
            },
            props: ['dataImage'],
            data: () => ({
                width: 0,
                height: 0,
                mouseX: 0,
                mouseY: 0,
                mouseLeaveDelay: null
            }),
            computed: {
                mousePX() {
                    return this.mouseX / this.width;
                },
                mousePY() {
                    return this.mouseY / this.height;
                },
                cardStyle() {
                    const rX = this.mousePX * 30;
                    const rY = this.mousePY * -30;
                    return {
                        transform: `rotateY(${rX}deg) rotateX(${rY}deg)`
                    };
                },
                cardBgTransform() {
                    const tX = this.mousePX * -40;
                    const tY = this.mousePY * -40;
                    return {
                        transform: `translateX(${tX}px) translateY(${tY}px)`
                    }
                },
                cardBgImage() {
                    return {
                        backgroundImage: `url(${this.dataImage})`
                    }
                }
            },
            methods: {
                handleMouseMove(e) {
                    this.mouseX = e.pageX - this.$refs.card.offsetLeft - this.width/2;
                    this.mouseY = e.pageY - this.$refs.card.offsetTop - this.height/2;
                },
                handleMouseEnter() {
                    clearTimeout(this.mouseLeaveDelay);
                },
                handleMouseLeave() {
                    this.mouseLeaveDelay = setTimeout(() => {
                        this.mouseX = 0;
                        this.mouseY = 0;
                    }, 1000);
                }
            }
        });

        const app = new Vue({
            el: '#app'
        });
    </script>
{% endblock %}
</body>
</html>
    