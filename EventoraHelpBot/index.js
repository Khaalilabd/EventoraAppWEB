const { Client, GatewayIntentBits, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require('discord.js');
const mysql = require('mysql2/promise');

// Configurer la connexion √† la base de donn√©es MySQL
const dbConfig = {
    host: 'localhost', // Remplacez par l'adresse de votre serveur MySQL
    user: 'root', // Remplacez par votre utilisateur MySQL
    password: '', // Remplacez par votre mot de passe MySQL
    database: 'eventora' // Nom de votre base de donn√©es
};

// Cr√©ez un nouveau client Discord avec les intents n√©cessaires
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates
    ]
});

// Lorsque le bot est pr√™t
client.once('ready', async () => {
    console.log(`[OK] Bot Discord initialis√© ! ${client.user.tag} est connect√©.`);

    // Tester la connexion √† la base de donn√©es
    try {
        const connection = await mysql.createConnection(dbConfig);
        console.log('[INFO] Connexion √† la base de donn√©es MySQL r√©ussie !');
        await connection.end();
    } catch (error) {
        console.error('[ERROR] Erreur lors de la connexion √† la base de donn√©es MySQL :', error);
    }
});

// √âv√©nement voiceStateUpdate pour d√©tecter les changements d'√©tat vocal
client.on('voiceStateUpdate', (oldState, newState) => {
    console.log('[INFO] √âv√©nement voiceStateUpdate d√©clench√© !');

    const member = newState.member;
    const newChannel = newState.channel;
    const oldChannel = oldState.channel;

    console.log(`[INFO] Membre : ${member.user.tag}`);
    console.log(`[INFO] Nouveau canal : ${newChannel ? newChannel.name : 'Aucun'}`);
    console.log(`[INFO] Ancien canal : ${oldChannel ? oldChannel.name : 'Aucun'}`);

    // V√©rifiez si le membre a rejoint le salon vocal "EventoraAPPWEB"
    if (newChannel && newChannel.name === 'EventoraAPPWEB' && (!oldChannel || oldChannel.name !== 'EventoraAPPWEB')) {
        console.log('[INFO] Envoi du message de bienvenue et du menu dans #eventora...');

        // Trouver le canal textuel #eventora
        const textChannel = newState.guild.channels.cache.find(channel => channel.name === 'eventora' && channel.type === 0); // 0 = canal textuel
        if (textChannel) {
            // Cr√©er le menu d√©roulant avec les options
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('menu-options')
                .setPlaceholder('Choisissez une option...')
                .addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Soumettre une r√©clamation')
                        .setDescription('Pour signaler un probl√®me ou une plainte.')
                        .setValue('reclamation'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Soumettre un feedback')
                        .setDescription('Donnez votre avis sur Eventora.')
                        .setValue('feedback'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Savoir des informations sur Eventora')
                        .setDescription('En savoir plus sur Eventora.')
                        .setValue('infos'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Afficher la liste des packs disponibles')
                        .setDescription('Voir les packs que nous proposons.')
                        .setValue('packs'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Passer une r√©servation')
                        .setDescription('R√©server un pack ou un √©v√©nement.')
                        .setValue('reservation'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Taper un paragraphe bien d√©taill√©')
                        .setDescription('Obtenir une description d√©taill√©e.')
                        .setValue('paragraphe')
                );

            // Ajouter le menu √† un composant d'action
            const row = new ActionRowBuilder().addComponents(selectMenu);

            // Envoyer le message de bienvenue avec le menu
            textChannel.send({
                content: `üéâ Bienvenue ${member.user.username} dans le salon vocal **EventoraAPPWEB** ! Eventora est une plateforme intuitive qui simplifie l‚Äôorganisation d‚Äô√©v√©nements : r√©servez des packs personnalis√©s, g√©rez vos r√©servations, soumettez r√©clamations et avis, et recevez des notifications en temps r√©el.\n\nQue souhaitez-vous faire ?`,
                components: [row]
            })
                .then(() => console.log('[INFO] Message de bienvenue et menu envoy√©s avec succ√®s !'))
                .catch(error => console.error('[ERROR] Erreur lors de l‚Äôenvoi du message/menu :', error));
        } else {
            console.log('[WARNING] Canal #eventora non trouv√© !');
        }
    }
});

// G√©rer les s√©lections dans le menu d√©roulant
client.on('interactionCreate', async interaction => {
    if (interaction.isStringSelectMenu() && interaction.customId === 'menu-options') {
        const selectedValue = interaction.values[0];

        switch (selectedValue) {
            case 'reclamation':
                await interaction.reply({
                    content: 'üìù **Soumettre une r√©clamation** : Cliquez sur le lien suivant pour soumettre votre r√©clamation : [Soumettre une r√©clamation](https://d660-197-17-125-97.ngrok-free.app/reclamation/new)',
                    ephemeral: true
                });
                break;

            case 'feedback':
                await interaction.reply({
                    content: 'üí¨ **Soumettre un feedback** : Partagez votre avis ici : [Soumettre un feedback](https://d660-197-17-125-97.ngrok-free.app/feedback/new)',
                    ephemeral: true
                });
                break;

            case 'infos':
                await interaction.reply({
                    content: '‚ÑπÔ∏è **Informations sur Eventora** : Eventora est une plateforme intuitive qui simplifie l‚Äôorganisation d‚Äô√©v√©nements. Consultez et r√©servez des packs personnalis√©s, g√©rez vos r√©servations via un espace personnel, soumettez r√©clamations et avis, et recevez des notifications en temps r√©el. Les organisateurs b√©n√©ficient d‚Äôun tableau de bord pour g√©rer services, packs et r√©clamations.',
                    ephemeral: true
                });
                break;

            case 'packs':
                try {
                    const connection = await mysql.createConnection(dbConfig);
                    const [rows] = await connection.execute('SELECT * FROM pack');

                    if (rows.length === 0) {
                        await interaction.reply({
                            content: 'üì¶ **Aucun pack disponible pour le moment.**',
                            ephemeral: true
                        });
                        await connection.end();
                        return;
                    }

                    let packList = 'üì¶ **Liste des packs disponibles** :\n';
                    rows.forEach(row => {
                        packList += `- **${row.name}** : ${row.price}‚Ç¨ - ${row.description}\n`;
                    });
                    packList += 'Pour r√©server un pack, s√©lectionnez l‚Äôoption "Passer une r√©servation".';

                    await interaction.reply({
                        content: packList,
                        ephemeral: true
                    });
                    await connection.end();
                } catch (error) {
                    console.error('[ERROR] Erreur lors de la r√©cup√©ration des packs :', error);
                    await interaction.reply({
                        content: '‚ùå Erreur lors de la r√©cup√©ration des packs.',
                        ephemeral: true
                    });
                }
                break;

            case 'reservation':
                await interaction.reply({
                    content: 'üìÖ **Passer une r√©servation** : R√©servez votre pack ou √©v√©nement ici : [Passer une r√©servation](https://d660-197-17-125-97.ngrok-free.app/reservation/new)',
                    ephemeral: true
                });
                break;

            case 'paragraphe':
                await interaction.reply({
                    content: 'üìú **Paragraphe d√©taill√©** : Eventora est une plateforme con√ßue pour simplifier l‚Äôorganisation de vos √©v√©nements, qu‚Äôil s‚Äôagisse d‚Äôanniversaires, de mariages, ou de conf√©rences professionnelles. Nous mettons √† votre disposition une gamme de packs adapt√©s √† tous les budgets, allant du Pack Basique pour les petits √©v√©nements, au Pack Premium qui inclut des services complets comme la location de salle, les d√©corations, et m√™me un traiteur. Notre √©quipe est d√©di√©e √† faire de votre √©v√©nement un moment inoubliable, en vous accompagnant √† chaque √©tape, de la planification √† la r√©alisation. Rejoignez notre communaut√© sur Discord pour poser vos questions et d√©couvrir nos derni√®res offres !',
                    ephemeral: true
                });
                break;

            default:
                await interaction.reply({
                    content: '‚ùì Option non reconnue. Veuillez r√©essayer.',
                    ephemeral: true
                });
        }
    }
});

// Connexion du bot avec votre token
client.login('MTM2NTc3ODc5NzYwNTAzMTk3Ng.GuIkur.0vX6AwLDye26ICFyw2z7Jzhe1pPm5J5iNgKclU');